---
name: Release Repository

on:
  workflow_call:
    inputs:
      release_candidate:
        description: Branch name of the release candidate. This branch will will not be deleted, you should
          delete it manually after the release is done.
        required: true
        type: string
      version:
        description: New version (used for tag and package versioning).
        required: true
        type: string
      release_name:
        description: Name of the release to be created. Version in the first place is recommended (e.g.
          `2.0.0-alpha`).
        required: true
        type: string
      automatic_mode:
        type: boolean
        default: false
        description: Automatically merge PR and create release.
      prerelease:
        type: boolean
        default: false
        description: Mark the release as a prerelease.

jobs:
  release:
    name: Release repository
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MAIN_BRANCH: ros2
      DEVEL_BRANCH: ros2-devel
    steps:
      - name: Checkout to rc branch
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_candidate }}

      - name: Catkin release
        id: catkin_release
        uses: at-wat/catkin-release-action@v1
        with:
          version: ${{ inputs.version }}
          git_user: action-bot
          git_email: action-bot@action-bot.com
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Catkin release - create PR
        run: |
          gh pr create \
          --base ${{ inputs.release_candidate }} \
          --head ${{ steps.catkin_release.outputs.created_branch }} \
          --title "Release ${{ steps.catkin_release.outputs.version}}" \
          --body "This PR incorporates package(s) version and changelog update."

      - name: Catkin release - merge PR
        if: ${{ inputs.automatic_mode }}
        run: |
          gh pr merge ${{ steps.catkin_release.outputs.created_branch }} \
          --merge --delete-branch

      - name: Grant permissions # Required permission grant after at-wat/catkin-release-action@v1 action
        if: ${{ inputs.automatic_mode }}
        run: |
          sudo chmod -R ugo+rwX .

      - name: Checkout to main branch
        if: ${{ inputs.release_candidate != env.MAIN_BRANCH && inputs.automatic_mode }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.MAIN_BRANCH }}
          fetch-depth: 0

      - name: Create PR to main branch
        if: ${{ inputs.release_candidate != env.MAIN_BRANCH && inputs.automatic_mode }}
        run: |
          gh pr create \
          --base ${{ env.MAIN_BRANCH }} \
          --head ${{ inputs.release_candidate }} \
          --title "Release ${{ steps.catkin_release.outputs.version}} to ${{ env.MAIN_BRANCH }}" \
          --body "This PR incorporates package(s) version and changelog update."

      - name: Merge PR to main branch
        if: ${{ inputs.release_candidate != env.MAIN_BRANCH && inputs.automatic_mode }}
        run: |
          gh pr merge ${{ inputs.release_candidate }} \
          --merge

      - name: Create prerelease
        if: ${{ inputs.automatic_mode && inputs.prerelease}}
        run: |
          gh release create ${{ steps.catkin_release.outputs.version }} \
          --target ${{ env.MAIN_BRANCH }} \
          --title ${{ inputs.release_name }} \
          --generate-notes \
          --prerelease

      - name: Create release
        if: ${{ inputs.automatic_mode && !inputs.prerelease }}
        run: |
          gh release create ${{ steps.catkin_release.outputs.version }} \
          --target ${{ env.MAIN_BRANCH }} \
          --title ${{ inputs.release_name }} \
          --generate-notes

      - name: Checkout to devel branch
        if: ${{ env.DEVEL_BRANCH != env.MAIN_BRANCH && inputs.automatic_mode }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DEVEL_BRANCH }}
          fetch-depth: 0

      - name: Update devel branch
        if: ${{ env.DEVEL_BRANCH != env.MAIN_BRANCH && inputs.automatic_mode }}
        run: |
          git config pull.rebase false
          git pull origin ${{ env.MAIN_BRANCH }}
          git push origin ${{ env.DEVEL_BRANCH }}
